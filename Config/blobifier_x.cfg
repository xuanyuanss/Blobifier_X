######################## Blobifier_X ########################

########################### 声明 ############################
# Blobifier_X是Blobifier的一个变体（X-MEN？，No *＾-＾*），是一个用于多色打印的喷嘴排除废料的项目，适配于Voron2.4等龙门移动式3D打印机。具备以下功能：
# 1.可用于单热端多色打印换料后耗材冲刷，可省掉擦料塔，但建议使用很小的擦料塔以清理喷嘴溢出的耗材。
# 2.本配置文件主要是配合ERCF和HAPPY HARE使用，HAPPY HARE中具体参数配置请参考HAPPY HARE及BLOBIFIER文档。
# 3.使用本想目前，请您确保了解本项目的、工作过程，避免对打印机造成意外损害。如不慎产生意外损失，开发人员不承担任何责任。

# 其实Blobifier_X物理结构已与Blobifier完全不同，仅是参考了其喷嘴冲刷创意，同时在软件部分做针对性修改，原版Blobifier请移步https://github.com/Dendrowen/Blobifier。
# 原版Blobifier对voron2.4并不友好，需要频繁升降龙门，并且牺牲热床有效打印面积，同时可能存在打印头撞击模型的风险。所以我设计了Blobifier_X。
# Blobifier_X安装在龙门上，冲刷时不需要降低龙门，而是通过一个小的步进电机实现托盘的升降而促使blob成型。

# 目前VORON2结构打印机废料处理尚无完美方案，目前方案基本满足使用，随着打印的进行，龙门逐渐升高，基本不会出现Blobifier_X撞击废料的风险。
# 感谢Blobifier开源项目，作者的创意真的很棒。

# 感谢您选择本项目，祝您生活愉快！

#！！！本宏中保留了一些利用铜刷清洁喷嘴的代码，但未启用，亦未调试，给那些想使用清洁刷的朋友使用，但请自行配置调试，切记切记！！！

# 轩辕十四
# 2024.8.17
##########################################################################################
##########################################################################################

# Blobifier_X硬件配置文件
[include blobifier_x_hw.cfg]

##########################################################################################
[gcode_macro BLOBIFIER_X]
# 这些参数定义了您的丝材清洗。回抽变量用于在清洗后立即回抽，以防止不必要的渗漏。一些丝材特别容易渗漏，可能在回抽后一两秒内继续从喷嘴渗出。根据需要更新。
variable_purge_spd:                      400    # 清洗速度：400毫米/分钟。
variable_purge_temp_min:                 200    # 最低喷嘴清洗温度：200摄氏度。
variable_retract_before_park:            2.0    # 清洗前回抽量：2.0毫米（设置为0以禁用）。
variable_retract_before_resume:          1.0    # 恢复打印前前回抽量，减少喷嘴溢出：1.0毫米（设置为0以禁用）。
variable_retract_speed:                 2000    # 回抽速度：2000毫米/分钟。

# 这些参数定义了您的擦洗次数、移动速度、安全Z轴间隙以及您想要擦洗的次数。根据需要更新。

#variable_wipe_qty:                         2    # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_travel_spd_xy:                10000    # X和Y轴上的移动速度（非清洗）：10000毫米/分钟。
variable_blob_kick_spd:                10000    # 将残留物踢开的速度：10000毫米/分钟。
#variable_wipe_spd_xy:                  15000    # Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference 
# is provided below.
# 
#                  ?   brush_width   ?                            
#                   _________________                                                          
#                  |                 |  ?                Y position is acquired from your 
#  brush_start (x) |                 | brush_depth       stepper_y position_max. Adjust 
#                  |_________________|  ?                your brush physically in Y so 
#                          (y)                           that the nozzle scrubs within the 
#                      brush_front                       brush.                                              
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
# Start location of the brush. Defaults for 250, 300 and 350mm are provided below. 
# Uncomment as necessary
# The brush will move diagonally through teh brush.
#    from (brush_start,brush_min_y) to (brush_start + brush_width, Y max)
#variable_brush_start:                    34    # For 250mm build    
#variable_brush_start:                    83.5  # For 300mm build
#variable_brush_start:                     37.5   #43.5   #82    # for 350mm build    GNEU
#variable_brush_min_y:                    353    # Minimum position in Y of the brush. 
#variable_brush_width:                     32    # width of the brush
#variable_position_wiper:                  85.5  # mid point of the wiper

# 冲刷位置，即喷嘴置于托盘中心时喷嘴的坐标
variable_purge_x:                          60     #X坐标
variable_purge_y:                          249    #Y坐标，通常为Y最大行程
variable_kick_x:                           80     #踢除blob后X坐标
variable_kick_ready_x:                     110    #准备踢除blob时X坐标
variable_yield_y:                          198    #打印头避让blob，调整此值使打印头底部与托盘距离少于15mm的部位避开即可，避免不正确的撞击blob，用于下次停靠时敲击blob

##########################################################################################
# BLOB TUNING
#
# 下一节定义了如何执行清洗序列。这是您调整清洗以创建漂亮残留物的地方。请参阅视觉参考以获得更好的理解。视觉参考中填充了示例值。以下是一些有助于调整的指南。
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. iteration_z_raise    |
# |                                     | Incr. max_iteration_length |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Incr. iteration_z_change   |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Decr. iteration_z_change   |
# |         later iterations            |                            |
# +-------------------------------------+----------------------------+
# |        I think my blobs can         | Balsy... Increase          |
# |          be much bigger!            | max_iterations_per_blob    |
# +-------------------------------------+----------------------------+
#

# 一次迭代中要挤出的丝材的最大毫米数（长度）。一个残留物包含多次迭代。
variable_max_iteration_length:                   40

# 每次迭代托盘下降的量
variable_iteration_bl_move:                       5

# 当喷嘴相对变高且残留物变宽时，需要减少托盘下降量。
variable_iteration_move_change:                      0.7

# 每个残留物的最大迭代次数。3次迭代对于大多数清洗应该足够。如果不够，Blobifier将为单次清洗创建多个残留物。
variable_max_iterations_per_blob:                 3

# 清洗前和清洗后的停留时间（毫秒），以释放喷嘴的压力。
variable_eject_hop:                               2.0

# 清洗前和清洗后的停留时间（毫秒），以释放喷嘴的压力，并使blob冷却。
variable_blob_cooling_time:                    2000

# 设置零件冷却风扇的速度。禁用可以帮助防止喷嘴冷却并刺激流动，启用它可以防止残留物粘在一起。值的范围从0到1，或者如果您不想更改，则为-1。
#variable_part_cooling_fan:                      -1  # Leave it unchanged
#variable_part_cooling_fan:                       0  # Disable the fan
variable_part_cooling_fan:                        1  # Run it at full speed


##########################################################################################
# 清洗长度调整
#
# 当工具映射的purge_volumes或参数PURGE_LENGTH未设置时，使用的默认清洗长度。
variable_purge_length:                          60

# 即使没有更换工具，也要执行的绝对最小清洗长度。
variable_purge_length_minimum:                  30  

# 切片机的值通常有点浪费。在这里调整以获得最优值。1.0是一个好的起点。
variable_purge_length_modifier:                  1.2

# 在清洗体积之后要添加的丝材长度。清洗体积并不总是考虑到刀具，因此从深色到浅色的更换可能足够长，但从浅色到深色可能太短。当您应该更改这个值时：
# 增加：当深色到浅色的更换很好，但浅色到深色的更换不好时。
# 减少：当浅色到深色的更换很好，但深色到浅色的更换不好时。不要忘记增加purge_length_modifier。
variable_purge_length_addition:                 5


gcode:

##########################################################################################
# 记录状态（包括风扇、速度等）
#
  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_X_state
  
##########################################################################################
# 检查归零状态
#
  {% if "xy" not in printer.toolhead.homed_axes %}    
    RESPOND MSG="BLOBIFIER_X: 请先归零XY"
  {% else %}
    
    # 模型冷却风扇
    {% if part_cooling_fan >= 0 %}
      # 保存风扇速度
      {% set backup_fan_speed = printer.fan.speed %}
      # 设置风扇速度
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # 设置挤出速度为100%，以确保正确的冲刷速度
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

##########################################################################################
# 定义基本变量
#
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
   
    # 从切片软件获取冲刷量 (请参考 
    # https://github.com/moggieuk/Happy-Hare/blob/variables/doc/gcode_preprocessing.md)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
           
##########################################################################################
# 确定冲刷长度
#
    {% if params.PURGE_LENGTH %} # ======= PARAM PURGE LENGTH ==============================
      {action_respond_info("BLOBIFIER_X: 提供了 PURGE_LENGTH 参数")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER_X: tool未切换 (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}
    {% elif pv %} # ========================== 从切片软件获取 ===============================
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER_X: from tool 未知. 寻找最大值用于 T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER_X: tool(s) 未知. 寻找最大值")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER_X: 切换 T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section + purge_length_addition %}
    {% else %} # ============================= 使用配置参数 =================================
      {action_respond_info("BLOBIFIER_X: 没有 toolmap or PURGE_LENGTH. 使用默认值")}
      {% set purge_len = purge_length|float %}
    {% endif %}
    # ==================================== 应用最小冲刷量 ===================================
    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("BLOBIFIER_X: 冲刷长度 %.2fmm" % (purge_len|float))}

##########################################################################################
# 冲刷序列
#
    # 检查清洗长度，如果有必要则进行清洗。
    {% if purge_len|float > 0 %}
      
      # 检查mmu舵机是否在正确位置
      {% if printer.mmu is defined and printer.mmu.enabled %}
         {% if printer.configfile.config.mmu.sync_to_extruder %}
           MMU_SYNC_GEAR_MOTOR SYNC=1
         {% else %}
           MMU_SERVO POS=up
         {% endif %}
      {% endif %} 

##########################################################################################
# 加热热端
#
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min-2}
        {% endif %}
      {% endif %}

##########################################################################################
# 开始迭代
#
      # 根据清洗长度和最大迭代长度计算总迭代次数。
      {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}
      {% if iterations > 3 %}
         {% set max_iteration_length = purge_len / iterations|int %}
      {% endif %}
     
      # 移动到冲刷位置     
      {% set pos_now = printer.gcode_move.gcode_position %}
      {% if pos_now.x != purge_x and pos_now.y != purge_y %}
        BLOBIFIER_X_PARK
      {% endif %}
      
      # 重复清洗过程，直到达到清洗长度。
      {% for n in range(iterations) %}
      
        # 计算当前blob中的当前迭代次数
        {% set step = n % max_iterations_per_blob %}

        # 确定挤出量。剩余的 purge_len 或者 max_iteration_length.
        {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
        {% set extrude_amount = [purge_amount_left,max_iteration_length]|min %}
        {% set extrude_ratio = extrude_amount / max_iteration_length %}

        # 计算托盘需要下降的量
        {% set step_triangular = step * (step + 1) / 2 %}
        {% set bl_move_substract = 0 if step == 0 else 
          step_triangular * iteration_move_change %}
        {% set bl_move = (iteration_bl_move - bl_move_substract) * extrude_ratio %}

        # 确保托盘下降量永远不会为负。
        {% set bl_move = [bl_move,0]|max %}
   #     {action_respond_info("BLOBIFIER_X: 托盘下降量= %.2f" % (bl_move|float))}

        # 基于挤出速度计算托盘下降速度。
        {% set duration = extrude_amount / purge_spd %} 
        {% set speed = bl_move / duration %}
        {% set bl_speed = speed / 60 %}

        # 相对定位
        G91 
        M83
        
        # 清除一次迭代。
        BLOBIFIER_X_RESET
        MANUAL_STEPPER STEPPER=blobifier_x MOVE={bl_move} SPEED={bl_speed} SYNC=0
        G1 E{extrude_amount} F{purge_spd}

##########################################################################################
# DEPOSIT BLOB
#
        {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
        {% set purge_length_reached = purge_len - max_iteration_length * (n+1) <= 0 %}
        
        {% if max_iterations_reached or purge_length_reached %}
          G1 E-{retract_before_resume} F{retract_speed}
          # 托盘下降一点，以减轻对blob的压力，防止它向侧面移动
          BLOBIFIER_X_RESET
          MANUAL_STEPPER STEPPER=blobifier_x MOVE={eject_hop}
        {% endif %}
        {% if max_iterations_reached and (not purge_length_reached) %}
		  G90
	      G1 X{kick_ready_x} F{travel_spd_xy}
          BLOBIFIER_X_HOME
        #  G4 P{blob_cooling_time}            #等待blob冷却，由于MANUAL_STEPPER命令中参数STOP_ON_ENDSTOP=1时电机移动需要一些时间，此处暂停可以取消。
          G1 X{purge_x} F{blob_kick_spd}
        {% endif %}
      {% endfor %}
    {% endif %}
    
    
 #   BLOBIFIER_X_CLEAN
				 
##########################################################################################
# 恢复打印机状态
#   
    {% if part_cooling_fan >= 0 %}
      # 如果模型风扇被改变，恢复其之前状态。
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_X_state 

# 进行最后的回抽，以匹配Happy Hare的预期。
  # G1 E-{printer.mmu.toolchange_retract} F{printer.configfile.settings.mmu.toolchange_retract_speed * 60}

##########################################################################################
# 擦嘴宏，暂时保留。本项目目前未设计擦嘴结构，故以下宏未作调试任何适配、调试，如要使用，请自行适配。
#
# [gcode_macro BLOBIFIER_X_CLEAN]
# variable_retract_before_print: 0.0
# gcode:
#   {% set bb = printer['gcode_macro BLOBIFIER_X'] %}
#   {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
#   # Position for wipe. Either left or right of brush based off bucket_pos to avoid 
#   # unnecessary travel.
#   SAVE_GCODE_STATE NAME=BLOBIFIER_X_CLEAN_state

#   G90

#   G1 X{bb.brush_start} Y{bb.brush_min_y} F{bb.travel_spd_xy}
     
#   # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
#   {% for wipes in range(1, (bb.wipe_qty + 1)) %}
#      G1 X{bb.brush_start + bb.brush_width} Y{position_y} F{bb.wipe_spd_xy}        
#      G1 X{bb.brush_start} Y{bb.brush_min_y} F{bb.wipe_spd_xy}                       
#   {% endfor %}
#   #Move to middle of wiper 
#     #G1 X{bb.brush_start + bb.brush_width/2} Y{position_y} F{bb.wipe_spd_xy} 
#   G1 Y{position_y} F{bb.wipe_spd_xy} 
#   G1 X{bb.position_wiper} F{bb.wipe_spd_xy}
#   #G1 E-{retract_before_print} F{bb.retract_speed}
  
#   RESTORE_GCODE_STATE NAME=BLOBIFIER_X_CLEAN_state


##########################################################################################
# 将喷嘴放在托盘上，以防止在灯丝交换过程中渗出。
# 将这个扩展放在mmu宏vars.cfg中的预卸载扩展中
# mmu_macro_vars.cfg: variable_user_pre_unload_extension: "BLOBIFIER_X_PARK"
#
[gcode_macro BLOBIFIER_X_PARK]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER_X'] %}

  SAVE_GCODE_STATE NAME=BLOBIFIER_X_park_state
  
  {% if "xy" in printer.toolhead.homed_axes %} 
    G91
    M83
    G1 E-{bl.retract_before_park} F{bl.retract_speed}
    
    {% set pos_now = printer.gcode_move.gcode_position %}
    G90
    {% if pos_now.x != bl.purge_x and pos_now.y != bl.purge_y %}
      {% if pos_now.x < bl.kick_ready_x %}
        G1 Y{bl.yield_y} F{bl.travel_spd_xy}
        G1 X{bl.kick_ready_x} F{bl.travel_spd_xy}
      {% endif %}
    {% endif %}
    G1 Y{bl.purge_y} F{bl.travel_spd_xy}
    BLOBIFIER_X_HOME
    G1 X{bl.purge_x} F{bl.travel_spd_xy}
  {% else %}
    {action_respond_info("BLOBIFIER_X: 请先归零XY")}
  {% endif %}
					 
  RESTORE_GCODE_STATE NAME=BLOBIFIER_X_park_state


##########################################################################################
# 托盘移动控制。
#
[gcode_macro BLOBIFIER_X_MOVE]
gcode:
	{% set bl = printer['gcode_macro BLOBIFIER_X_HOME'] %}
	{% set move = params.MOVE|float %}
	{% if bl.bl_homed == 1 %}
		MANUAL_STEPPER STEPPER=blobifier_x MOVE={move}
	{% else %}
		RESPOND MSG="BLOBIFIER_X 未归零，正在归零中，将在归零后完成移动"
		BLOBIFIER_X_HOME
		MANUAL_STEPPER STEPPER=blobifier_x MOVE={move}
	{% endif %}

##########################################################################################
# 托盘归零。调节限位螺钉，使其触发时，托盘与喷嘴之间保持约0.2~0.6mm间隙。
#
[gcode_macro BLOBIFIER_X_HOME]
variable_bl_homed: 0
gcode:
	MANUAL_STEPPER STEPPER=blobifier_x MOVE=-20 STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_X_HOME VARIABLE=bl_homed VALUE=1
    {action_respond_info("BLOBIFIER_X: 已归零")}

##########################################################################################
# 位置重置。将当前位置设为零。
#
[gcode_macro BLOBIFIER_X_RESET]
gcode:
	MANUAL_STEPPER STEPPER=blobifier_x SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=BLOBIFIER_X_HOME VARIABLE=bl_homed VALUE=0
    {action_respond_info("BLOBIFIER_X: 已重置")}

##########################################################################################
# 合理性检查。
#
[delayed_gcode BLOBIFIER_X_INIT]
initial_duration: 5.0
gcode:
  _BLOBIFIER_X_INIT

[gcode_macro _BLOBIFIER_X_INIT]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER_X'] %}

  # 模型冷却风扇参数有效性检查
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("BLOBIFIER_X: 值 %f 对于变量 part_cooling_fan 是无效的，请设置为 -1 或者 0 - 1 中间的任意数" % (bl.part_cooling_fan))}
  {% endif %}

  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].restore_xy_pos != 'next' %}
      {action_respond_info("BLOBIFIER_X: 如果不使用擦拭塔, 建议设置restore_xy_pos: 'next'，详见 mmu_macro_vars.cfg")}
    {% endif %}

    # Blobifier_X park 已启用？
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].user_pre_unload_extension == "BLOBIFIER_PARK" %}

      # MMU park 已启用？
      {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].enable_park %}
        {action_respond_info("BLOBIFIER_X: MMU park 已启用，可能会干扰BLOBIFIER_X_PARK，详见 mmu_macro_vars.cfg")}

        # MMU Park after form tip 已启用？
        {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].park_after_form_tip %}
          {action_respond_info("BLOBIFIER_X: MMU park_after_form_tip 已启用，可能会干扰BLOBIFIER_X_PARK，详见 mmu_macro_vars.cfg")}
        {% endif %}
      {% endif %}

      # Filametrix 切刀已安装？
      {% if printer.configfile.config.mmu.form_tip_macro == '_MMU_CUT_TIP' %}

        # Restore position after CUT 未启用？
        {% if not printer['gcode_macro _MMU_CUT_TIP_VARS'].restore_position %}
          {action_respond_info("BLOBIFIER_X: _MMU_CUT_TIP restore_position 未启用，可能会限制BLOBIFIER_X_PARK的应用，详见 mmu_macro_vars.cfg")}
        {% endif %}
    
      {% endif %}
    
    # Blobifier_X 已启用, 但是 Blobifier_park 未启用
    {% elif printer['gcode_macro _MMU_SEQUENCE_VARS'].user_post_load_extension == 'BLOBIFIER' %}
      {action_respond_info("BLOBIFIER_X: 建议设置 user_pre_unload_extension BLOBIFIER_X_PARK，详见 mmu_macro_vars.cfg")}
    {% endif %}
  {% endif %}


  